@mixin clearfix() {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin absCenter() {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}

// MEDIA QUERY MANAGER
/* 
0 - 600px      Phone
600 - 900px    Tablet Portrait
900 - 1200px   Tablet Landscape
1200 - 1800px  Normal styles
1800px -       Big Desktop
 */
/* 
$breakpoint argument choices:
- phone
- tab-port
- tab-land
- big-desktop

1em = 16px always in mediaq ueries
 */
@mixin respond($breakpoint) {
  @if $breakpoint == phone {
    @media only screen and (max-width: 37.5em) { @content }; // 600px
  }
  @if $breakpoint == tab-port {
    @media only screen and (max-width: 56.25em) { @content }; // 900px
  }
  @if $breakpoint == tab-land {
    @media only screen and (max-width: 75em) { @content }; // 1200px
  }
  @if $breakpoint == big-desktop {
    @media only screen and (min-width: 112.5em) { @content }; // 1800px
  }
}



// MY OWN STUFF

/*
Using Grid:

<div class="flex-grid-wrapper">
  <div class="flex-grid">
    <div class="flex-grid-item"></div>
    <div class="flex-grid-item"></div>
    <div class="flex-grid-item"></div>
  </div>
</div>

.flex-grid { @include flex-grid(0px 10px 10px, 800px 20px 20px); }
.flex-grid-item { 
  @include flex-grid-item(
    0px 10px 1,
    800px 20px 1/3,
  );
}
*/
.flex-grid-wrapper { overflow: hidden; }

@mixin flex-grid($breakpoints...) {
  display: flex;
  flex-wrap: wrap;
  // justify-content: center;
  @each $bp in $breakpoints {
    $min-width: nth($bp, 1);
    $h-gutter: nth($bp, 2);
    $v-gutter: nth($bp, 3);

    @media (min-width: $min-width) {
      // margin-left: -$h-gutter;
      margin: (-$v-gutter/2) (-$h-gutter/2);
      > * {
        // padding-left: $h-gutter/2;
        // padding-right: $h-gutter/2;
        // padding-bottom: $v-gutter/2;
        // padding-top: $v-gutter/2;
        margin: $v-gutter/2 $h-gutter/2;
      }
    }
  }
}

@mixin flex-grid-item($breakpoints...) {
  @each $bp in $breakpoints {
    $min-width: nth($bp, 1);
    $h-gutter: nth($bp, 2);
    // $v-gutter: nth($bp, 3);
    $columns: nth($bp, 3);

    $basis: percentage($columns);
    @media (min-width: $min-width) {
      flex-basis: calc(#{$basis} - #{$h-gutter});
    }
  }
}

$power-to-min-fz: 0.9;
@mixin responsive-font($max-w, $min-w, $max-fz, $min-fz: null) {

  @if ($min-fz == null) {
    $min-fz: pow($max-fz / 1px, $power-to-min-fz) * 1px;  
  }
  
  font-size: calc((100vw - #{$min-w}) * #{($max-fz - $min-fz) / ($max-w - $min-w)} + #{$min-fz});
  @media (min-width: #{$max-w}) {
    font-size: $max-fz;
  };

  @media (max-width: #{$min-w}) {
    font-size: $min-fz;
  };
}

// responsive (from smaller to larger)
$power-to-max: 1.2;
@function r( $min-v, $max-v: null, $max-w: 1200px, $min-w: 320px) {

  @if ($max-v == null) {
    $max-v: pow($min-v / 1px, $power-to-max) * 1px;  
  }
  
  @return calc((100vw - #{$min-w}) * #{($max-v - $min-v) / ($max-w - $min-w)} + #{$min-v});
}

// responsive-inverse (from larger to smaller)

$power-to-min: 0.9;
@function ri( $max-v, $min-v: null, $max-w: 1200px, $min-w: 320px) {

  @if ($min-v == null) {
    $min-v: pow($max-v / 1px, $power-to-min) * 1px;
    @debug($power-to-min);
  }
  
  @return calc((100vw - #{$min-w}) * #{($max-v - $min-v) / ($max-w - $min-w)} + #{$min-v});
}
